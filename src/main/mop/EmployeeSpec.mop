import br.unb.cic.mop.Employee;

EmployeeSpec(Employee emp) {

    creation event c1 after() returning(Employee emp): call(public Employee.new(String)) { }

    creation event c2 after(String name, double salary) returning(Employee emp):
      call(public Employee.new(String, double)) &&
      args(name, salary) &&
      condition(salary > 0) { }

    creation event c3 after(String name, double salary) returning(Employee emp):
      call(public Employee.new(String, double)) &&
      args(name, salary) &&
      condition(salary <= 0.0) { }

    event validSalary before(double salary, Employee emp):
      call(public void Employee.setSalary(double)) &&
      target(emp) &&
      args(salary) && condition(salary > 0) { }

    event invalidSalary before(double salary, Employee emp):
      call(public void Employee.setSalary(double)) &&
      target(emp) &&
      args(salary) && condition(salary <= 0) {}

    event validCut before(int percentage, Employee emp):
       call(public void Employee.cutSalary(int)) &&
       args(percentage) &&
       target(emp) &&
       condition(percentage > 0 && percentage <= 99) {}

    event invalidCut before(int percentage, Employee emp):
      call(public void Employee.cutSalary(int)) &&
      args(percentage) &&
      target(emp) &&
      condition(percentage < 0 || percentage > 99) {}

    event total after(Employee emp):
      call(public double Employee.totalSalary()) &&
      target(emp) { }

    // ere : (c1 validSalary (validSalary | total)*) | (c2 (validSalary | total)*)

    fsm :
      start [
         c1 -> waitingSetSalary
         c2 -> salaryAlreadyDefined
      ]
      waitingSetSalary [
         validSalary -> salaryAlreadyDefined
         total -> failure
      ]
      salaryAlreadyDefined [
         validSalary -> salaryAlreadyDefined
         total -> salaryAlreadyDefined
         validCut -> salaryAlreadyDefined
      ]
      failure [

      ]

      alias final = salaryAlreadyDefined
      alias error = failure

      @final {
        System.out.println("end state:");
      }

      @error {
        throw new RuntimeException("invalid sequence of method calls");
      }

      @fail {
        throw new RuntimeException("invalid sequence of method calls");
      }
}